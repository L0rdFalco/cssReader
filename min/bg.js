var cssReaderLoaded = !1, cssCiewerContextMenusParent = null; function cssCiewerDebugEl() { msgSender("el") } function cssCiewerDebugElId() { msgSender("id") } function cssCiewerDebugElTagName() { msgSender("tagName") } function cssCiewerDebugElClassName() { msgSender("className") } function cssCiewerDebugElStyle() { msgSender("style") } function cssCiewerDebugElCssText() { msgSender("cssText") } function cssCiewerDebugElGetComputedStyle() { msgSender("getComputedStyle") } function cssCiewerDebugElSimpleCssDefinition() { msgSender("simpleCssDefinition") } function msgSender(e) { chrome.tabs.query({ active: !0, currentWindow: !0 }, (function (t) { chrome.tabs.sendMessage(t[0].id, { args: e }) })) } chrome.runtime.onInstalled.addListener((function (e) { "install" != e.reason && "update" != e.reason || chrome.tabs.create({ url: "./web/thanks.html" }) })), chrome.runtime.onMessage.addListener(((e, t, s) => { if ("from popup-show" === e.message) s({ message: "from options activation success" }); else if ("notify" === e.message) chrome.notifications.create({ title: "Title", message: "There is an time slot available", iconUrl: "/img/24.png", type: "basic" }); else try { s({ message: "fail" }) } catch (e) { console.log(e) } return !0 })), chrome.notifications.onClicked.addListener((e => { chrome.tabs.create({ url: "https://google.com" }) })), chrome.action.onClicked.addListener((async e => { let t = e.id; if (0 != e.url.indexOf("https://chrome.google.com") && 0 != e.url.indexOf("chrome://")) { if (cssReaderLoaded || (cssCiewerContextMenusParent = chrome.contextMenus.create({ id: "0", title: "CSSReader console", contexts: ["all"] }), chrome.contextMenus.create({ id: "1", title: "element", contexts: ["all"], parentId: cssCiewerContextMenusParent }), chrome.contextMenus.create({ id: "2", title: "element.id", contexts: ["all"], parentId: cssCiewerContextMenusParent }), chrome.contextMenus.create({ id: "3", title: "element.tagName", contexts: ["all"], parentId: cssCiewerContextMenusParent }), chrome.contextMenus.create({ id: "4", title: "element.className", contexts: ["all"], parentId: cssCiewerContextMenusParent }), chrome.contextMenus.create({ id: "5", title: "element.style", contexts: ["all"], parentId: cssCiewerContextMenusParent }), chrome.contextMenus.create({ id: "6", title: "element.cssText", contexts: ["all"], parentId: cssCiewerContextMenusParent }), chrome.contextMenus.create({ id: "7", title: "element.getComputedStyle", contexts: ["all"], parentId: cssCiewerContextMenusParent }), chrome.contextMenus.create({ id: "8", title: "element.simpleCssDefinition", contexts: ["all"], parentId: cssCiewerContextMenusParent })), chrome.contextMenus.onClicked.addListener((t => { switch (console.log("info", t), t.menuItemId) { case "1": cssCiewerDebugEl(e); break; case "2": cssCiewerDebugElId(e); break; case "3": cssCiewerDebugElTagName(e); break; case "4": cssCiewerDebugElClassName(e); break; case "5": cssCiewerDebugElStyle(e); break; case "6": cssCiewerDebugElCssText(e); break; case "7": cssCiewerDebugElGetComputedStyle(e); break; case "8": cssCiewerDebugElSimpleCssDefinition(); break; default: console.log("Standard context menu item clicked.") } })), e.url && "complete" === e.status && e.url.startsWith("http")) { try { await chrome.scripting.insertCSS({ target: { tabId: t }, files: ["./content/cssReader.css"] }), await chrome.scripting.executeScript({ target: { tabId: t }, files: ["./content/cssReader.js"] }) } catch (e) { console.log(e) } cssReaderLoaded = !0 } } else alert("CSSReader doesn't work on Google's websites!") }));