var CSSReader_element, CSSReader_element_cssDefinition, CSSReader_container, CSSReader_current_element, CSSReader_pFont = new Array("font-family", "font-size", "font-style", "font-variant", "font-weight", "letter-spacing", "line-height", "text-decoration", "text-align", "text-indent", "text-transform", "vertical-align", "white-space", "word-spacing"), CSSReader_pColorBg = new Array("background-attachment", "background-color", "background-image", "background-position", "background-repeat", "color"), CSSReader_pBox = new Array("height", "width", "border", "border-top", "border-right", "border-bottom", "border-left", "margin", "padding", "max-height", "min-height", "max-width", "min-width"), CSSReader_pPositioning = new Array("position", "top", "bottom", "right", "left", "float", "display", "clear", "z-index"), CSSReader_pList = new Array("list-style-image", "list-style-type", "list-style-position"), CSSReader_pTable = new Array("border-collapse", "border-spacing", "caption-side", "empty-cells", "table-layout"), CSSReader_pMisc = new Array("overflow", "cursor", "visibility"), CSSReader_pEffect = new Array("transform", "transition", "outline", "outline-offset", "box-sizing", "resize", "text-shadow", "text-overflow", "word-wrap", "box-shadow", "border-top-left-radius", "border-top-right-radius", "border-bottom-left-radius", "border-bottom-right-radius"), CSSReader_categories = { pFontText: CSSReader_pFont, pColorBg: CSSReader_pColorBg, pBox: CSSReader_pBox, pPositioning: CSSReader_pPositioning, pList: CSSReader_pList, pTable: CSSReader_pTable, pMisc: CSSReader_pMisc, pEffect: CSSReader_pEffect }, CSSReader_categoriesTitle = { pFontText: "Font & Text", pColorBg: "Color & Background", pBox: "Box", pPositioning: "Positioning", pList: "List", pTable: "Table", pMisc: "Miscellaneous", pEffect: "Effects" }, CSSReader_tableTagNames = new Array("TABLE", "CAPTION", "THEAD", "TBODY", "TFOOT", "COLGROUP", "COL", "TR", "TH", "TD"), CSSReader_listTagNames = new Array("UL", "LI", "DD", "DT", "OL"), CSSReader_hexa = new Array("0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", ""); function GetCurrentDocument() { return window.document } function IsInArray(e, t) { for (var r = 0; r < e.length; r++)if (t == e[r]) return !0; return !1 } function DecToHex(e) { var t = ""; return t += CSSReader_hexa[Math.floor(e / 16)], t += CSSReader_hexa[e %= 16] } function RGBToHex(e) { for (var t = e.search(/\(/) + 1, r = e.search(/\)/), o = (e = e.slice(t, r)).split(", "), n = "#", S = 0; S < o.length; S++)n += DecToHex(o[S]); return "#00000000" == n && (n = "#FFFFFF"), n = '<span style="border: 1px solid #000000 !important;width: 8px !important;height: 8px !important;display: inline-block !important;background-color:' + n + ' !important;"></span> ' + n } function GetFileName(e) { var t = e.search(/\(/) + 1, r = e.search(/\)/), o = (e = e.slice(t, r)).split("/"); return o[o.length - 1] } function RemoveExtraFloat(e) { return e = e.substr(0, e.length - 2), Math.round(e) + "px" } function GetCSSProperty(e, t) { return e.getPropertyValue(t) } function SetCSSProperty(e, t) { GetCurrentDocument().getElementById("CSSReader_" + t).lastChild.innerHTML = " : " + e.getPropertyValue(t) } function SetCSSPropertyIf(e, t, r) { var o = GetCurrentDocument().getElementById("CSSReader_" + t); return r ? (o.lastChild.innerHTML = " : " + e.getPropertyValue(t), o.style.display = "block", 1) : (o.style.display = "none", 0) } function SetCSSPropertyValue(e, t, r) { var o = GetCurrentDocument().getElementById("CSSReader_" + t); o.lastChild.innerHTML = " : " + r, o.style.display = "block" } function SetCSSPropertyValueIf(e, t, r, o) { var n = GetCurrentDocument().getElementById("CSSReader_" + t); return o ? (n.lastChild.innerHTML = " : " + r, n.style.display = "block", 1) : (n.style.display = "none", 0) } function HideCSSProperty(e) { GetCurrentDocument().getElementById("CSSReader_" + e).style.display = "none" } function HideCSSCategory(e) { GetCurrentDocument().getElementById("CSSReader_" + e).style.display = "none" } function ShowCSSCategory(e) { GetCurrentDocument().getElementById("CSSReader_" + e).style.display = "block" } function UpdatefontText(e) { SetCSSProperty(e, "font-family"), SetCSSProperty(e, "font-size"), SetCSSPropertyIf(e, "font-weight", "400" != GetCSSProperty(e, "font-weight")), SetCSSPropertyIf(e, "font-variant", "normal" != GetCSSProperty(e, "font-variant")), SetCSSPropertyIf(e, "font-style", "normal" != GetCSSProperty(e, "font-style")), SetCSSPropertyIf(e, "letter-spacing", "normal" != GetCSSProperty(e, "letter-spacing")), SetCSSPropertyIf(e, "line-height", "normal" != GetCSSProperty(e, "line-height")), SetCSSPropertyIf(e, "text-decoration", "none" != GetCSSProperty(e, "text-decoration")), SetCSSPropertyIf(e, "text-align", "start" != GetCSSProperty(e, "text-align")), SetCSSPropertyIf(e, "text-indent", "0px" != GetCSSProperty(e, "text-indent")), SetCSSPropertyIf(e, "text-transform", "none" != GetCSSProperty(e, "text-transform")), SetCSSPropertyIf(e, "vertical-align", "baseline" != GetCSSProperty(e, "vertical-align")), SetCSSPropertyIf(e, "white-space", "normal" != GetCSSProperty(e, "white-space")), SetCSSPropertyIf(e, "word-spacing", "normal" != GetCSSProperty(e, "word-spacing")) } function UpdateColorBg(e) { SetCSSPropertyValue(e, "color", RGBToHex(GetCSSProperty(e, "color"))), SetCSSPropertyValueIf(e, "background-color", RGBToHex(GetCSSProperty(e, "background-color")), "transparent" != GetCSSProperty(e, "background-color")), SetCSSPropertyIf(e, "background-attachment", "scroll" != GetCSSProperty(e, "background-attachment")), SetCSSPropertyValueIf(e, "background-image", GetFileName(GetCSSProperty(e, "background-image")), "none" != GetCSSProperty(e, "background-image")), SetCSSPropertyIf(e, "background-position", "" != GetCSSProperty(e, "background-position")), SetCSSPropertyIf(e, "background-repeat", "repeat" != GetCSSProperty(e, "background-repeat")) } function UpdateBox(e) { SetCSSPropertyIf(e, "height", "auto" != RemoveExtraFloat(GetCSSProperty(e, "height"))), SetCSSPropertyIf(e, "width", "auto" != RemoveExtraFloat(GetCSSProperty(e, "width"))); var t = RemoveExtraFloat(GetCSSProperty(e, "border-top-width")) + " " + GetCSSProperty(e, "border-top-style") + " " + RGBToHex(GetCSSProperty(e, "border-top-color")), r = RemoveExtraFloat(GetCSSProperty(e, "border-bottom-width")) + " " + GetCSSProperty(e, "border-bottom-style") + " " + RGBToHex(GetCSSProperty(e, "border-bottom-color")), o = RemoveExtraFloat(GetCSSProperty(e, "border-right-width")) + " " + GetCSSProperty(e, "border-right-style") + " " + RGBToHex(GetCSSProperty(e, "border-right-color")), n = RemoveExtraFloat(GetCSSProperty(e, "border-left-width")) + " " + GetCSSProperty(e, "border-left-style") + " " + RGBToHex(GetCSSProperty(e, "border-left-color")); t == r && r == o && o == n && "none" != GetCSSProperty(e, "border-top-style") ? (SetCSSPropertyValue(e, "border", t), HideCSSProperty("border-top"), HideCSSProperty("border-bottom"), HideCSSProperty("border-right"), HideCSSProperty("border-left")) : (SetCSSPropertyValueIf(e, "border-top", t, "none" != GetCSSProperty(e, "border-top-style")), SetCSSPropertyValueIf(e, "border-bottom", r, "none" != GetCSSProperty(e, "border-bottom-style")), SetCSSPropertyValueIf(e, "border-right", o, "none" != GetCSSProperty(e, "border-right-style")), SetCSSPropertyValueIf(e, "border-left", n, "none" != GetCSSProperty(e, "border-left-style")), HideCSSProperty("border")); var S = RemoveExtraFloat(GetCSSProperty(e, "margin-top")), a = RemoveExtraFloat(GetCSSProperty(e, "margin-bottom")), i = RemoveExtraFloat(GetCSSProperty(e, "margin-right")), l = RemoveExtraFloat(GetCSSProperty(e, "margin-left")), s = ("0px" == S ? "0" : S) + " " + ("0px" == i ? "0" : i) + " " + ("0px" == a ? "0" : a) + " " + ("0px" == l ? "0" : l); SetCSSPropertyValueIf(e, "margin", s, "0 0 0 0" != s); var d = RemoveExtraFloat(GetCSSProperty(e, "padding-top")), p = RemoveExtraFloat(GetCSSProperty(e, "padding-bottom")), C = RemoveExtraFloat(GetCSSProperty(e, "padding-right")), y = RemoveExtraFloat(GetCSSProperty(e, "padding-left")), c = ("0px" == d ? "0" : d) + " " + ("0px" == C ? "0" : C) + " " + ("0px" == p ? "0" : p) + " " + ("0px" == y ? "0" : y); SetCSSPropertyValueIf(e, "padding", c, "0 0 0 0" != c), SetCSSPropertyIf(e, "min-height", "0px" != GetCSSProperty(e, "min-height")), SetCSSPropertyIf(e, "max-height", "none" != GetCSSProperty(e, "max-height")), SetCSSPropertyIf(e, "min-width", "0px" != GetCSSProperty(e, "min-width")), SetCSSPropertyIf(e, "max-width", "none" != GetCSSProperty(e, "max-width")) } function UpdatePositioning(e) { SetCSSPropertyIf(e, "position", "static" != GetCSSProperty(e, "position")), SetCSSPropertyIf(e, "top", "auto" != GetCSSProperty(e, "top")), SetCSSPropertyIf(e, "bottom", "auto" != GetCSSProperty(e, "bottom")), SetCSSPropertyIf(e, "right", "auto" != GetCSSProperty(e, "right")), SetCSSPropertyIf(e, "left", "auto" != GetCSSProperty(e, "left")), SetCSSPropertyIf(e, "float", "none" != GetCSSProperty(e, "float")), SetCSSProperty(e, "display"), SetCSSPropertyIf(e, "clear", "none" != GetCSSProperty(e, "clear")), SetCSSPropertyIf(e, "z-index", "auto" != GetCSSProperty(e, "z-index")) } function UpdateTable(e, t) { if (IsInArray(CSSReader_tableTagNames, t)) { var r = 0; r += SetCSSPropertyIf(e, "border-collapse", "separate" != GetCSSProperty(e, "border-collapse")), r += SetCSSPropertyIf(e, "border-spacing", "0px 0px" != GetCSSProperty(e, "border-spacing")), r += SetCSSPropertyIf(e, "caption-side", "top" != GetCSSProperty(e, "caption-side")), r += SetCSSPropertyIf(e, "empty-cells", "show" != GetCSSProperty(e, "empty-cells")), (r += SetCSSPropertyIf(e, "table-layout", "auto" != GetCSSProperty(e, "table-layout"))) > 0 ? ShowCSSCategory("pTable") : HideCSSCategory("pTable") } else HideCSSCategory("pTable") } function UpdateList(e, t) { if (IsInArray(CSSReader_listTagNames, t)) { ShowCSSCategory("pList"); var r = GetCSSProperty(e, "list-style-image"); "none" == r ? (SetCSSProperty(e, "list-style-type"), HideCSSProperty("list-style-image")) : (SetCSSPropertyValue(e, "list-style-image", r), HideCSSProperty("list-style-type")), SetCSSProperty(e, "list-style-position") } else HideCSSCategory("pList") } function UpdateMisc(e) { var t = 0; t += SetCSSPropertyIf(e, "overflow", "visible" != GetCSSProperty(e, "overflow")), t += SetCSSPropertyIf(e, "cursor", "auto" != GetCSSProperty(e, "cursor")), (t += SetCSSPropertyIf(e, "visibility", "visible" != GetCSSProperty(e, "visibility"))) > 0 ? ShowCSSCategory("pMisc") : HideCSSCategory("pMisc") } function UpdateEffects(e) { var t = 0; t += SetCSSPropertyIf(e, "transform", GetCSSProperty(e, "transform")), t += SetCSSPropertyIf(e, "transition", GetCSSProperty(e, "transition")), t += SetCSSPropertyIf(e, "outline", GetCSSProperty(e, "outline")), t += SetCSSPropertyIf(e, "outline-offset", "0px" != GetCSSProperty(e, "outline-offset")), t += SetCSSPropertyIf(e, "box-sizing", "content-box" != GetCSSProperty(e, "box-sizing")), t += SetCSSPropertyIf(e, "resize", "none" != GetCSSProperty(e, "resize")), t += SetCSSPropertyIf(e, "text-shadow", "none" != GetCSSProperty(e, "text-shadow")), t += SetCSSPropertyIf(e, "text-overflow", "clip" != GetCSSProperty(e, "text-overflow")), t += SetCSSPropertyIf(e, "word-wrap", "normal" != GetCSSProperty(e, "word-wrap")), t += SetCSSPropertyIf(e, "box-shadow", "none" != GetCSSProperty(e, "box-shadow")), t += SetCSSPropertyIf(e, "border-top-left-radius", "0px" != GetCSSProperty(e, "border-top-left-radius")), t += SetCSSPropertyIf(e, "border-top-right-radius", "0px" != GetCSSProperty(e, "border-top-right-radius")), t += SetCSSPropertyIf(e, "border-bottom-left-radius", "0px" != GetCSSProperty(e, "border-bottom-left-radius")), (t += SetCSSPropertyIf(e, "border-bottom-right-radius", "0px" != GetCSSProperty(e, "border-bottom-right-radius"))) > 0 ? ShowCSSCategory("pEffect") : HideCSSCategory("pEffect") } function CSSReaderMouseOver(e) { var t = GetCurrentDocument(), r = t.getElementById("CSSReader_block"); if (r) { r.firstChild.innerHTML = "&lt;" + this.tagName + "&gt;" + ("" == this.id ? "" : " #" + this.id) + ("" == this.className ? "" : " ." + this.className), "body" != this.tagName && (this.style.outline = "1px dashed #13eb4c", CSSReader_current_element = this); var o = t.defaultView.getComputedStyle(this, null); UpdatefontText(o), UpdateColorBg(o), UpdateBox(o), UpdatePositioning(o), UpdateTable(o, this.tagName), UpdateList(o, this.tagName), UpdateMisc(o), UpdateEffects(o), CSSReader_element = this, cssReaderRemoveElement("cssReaderInsertMessage"), e.stopPropagation(), CSSReader_element_cssDefinition = this.tagName.toLowerCase() + ("" == this.id ? "" : " #" + this.id) + ("" == this.className ? "" : " ." + this.className) + " {\n", CSSReader_element_cssDefinition += "\t/* Font & Text */\n"; for (var n = 0; n < CSSReader_pFont.length; n++)CSSReader_element_cssDefinition += "\t" + CSSReader_pFont[n] + ": " + o.getPropertyValue(CSSReader_pFont[n]) + ";\n"; CSSReader_element_cssDefinition += "\n\t/* Color & Background */\n"; for (n = 0; n < CSSReader_pColorBg.length; n++)CSSReader_element_cssDefinition += "\t" + CSSReader_pColorBg[n] + ": " + o.getPropertyValue(CSSReader_pColorBg[n]) + ";\n"; CSSReader_element_cssDefinition += "\n\t/* Box */\n"; for (n = 0; n < CSSReader_pBox.length; n++)CSSReader_element_cssDefinition += "\t" + CSSReader_pBox[n] + ": " + o.getPropertyValue(CSSReader_pBox[n]) + ";\n"; CSSReader_element_cssDefinition += "\n\t/* Positioning */\n"; for (n = 0; n < CSSReader_pPositioning.length; n++)CSSReader_element_cssDefinition += "\t" + CSSReader_pPositioning[n] + ": " + o.getPropertyValue(CSSReader_pPositioning[n]) + ";\n"; CSSReader_element_cssDefinition += "\n\t/* List */\n"; for (n = 0; n < CSSReader_pList.length; n++)CSSReader_element_cssDefinition += "\t" + CSSReader_pList[n] + ": " + o.getPropertyValue(CSSReader_pList[n]) + ";\n"; CSSReader_element_cssDefinition += "\n\t/* Table */\n"; for (n = 0; n < CSSReader_pTable.length; n++)CSSReader_element_cssDefinition += "\t" + CSSReader_pTable[n] + ": " + o.getPropertyValue(CSSReader_pTable[n]) + ";\n"; CSSReader_element_cssDefinition += "\n\t/* Miscellaneous */\n"; for (n = 0; n < CSSReader_pMisc.length; n++)CSSReader_element_cssDefinition += "\t" + CSSReader_pMisc[n] + ": " + o.getPropertyValue(CSSReader_pMisc[n]) + ";\n"; CSSReader_element_cssDefinition += "\n\t/* Effects */\n"; for (n = 0; n < CSSReader_pEffect.length; n++)CSSReader_element_cssDefinition += "\t" + CSSReader_pEffect[n] + ": " + o.getPropertyValue(CSSReader_pEffect[n]) + ";\n"; CSSReader_element_cssDefinition += "}" } } function CSSReaderMouseOut(e) { this.style.outline = "", e.stopPropagation() } function CSSReaderMouseMove(e) { var t = GetCurrentDocument(), r = t.getElementById("CSSReader_block"); if (r) { r.style.display = "block"; var o = window.innerWidth, n = window.innerHeight, S = t.defaultView.getComputedStyle(r, null).getPropertyValue("height"); S = 1 * S.substr(0, S.length - 2), e.pageX + 332 > o ? e.pageX - 332 - 10 > 0 ? r.style.left = e.pageX - 332 - 40 + "px" : r.style.left = "0px" : r.style.left = e.pageX + 20 + "px", e.pageY + S > n ? e.pageY - S - 10 > 0 ? r.style.top = e.pageY - S - 20 + "px" : r.style.top = "0px" : r.style.top = e.pageY + 20 + "px", inView = CSSReaderIsElementInViewport(r), inView || (r.style.top = window.pageYOffset + 20 + "px"), e.stopPropagation() } } function CSSReaderIsElementInViewport(e) { var t = e.getBoundingClientRect(); return t.top >= 0 && t.left >= 0 && t.bottom <= (window.innerHeight || document.documentElement.clientHeight) && t.right <= (window.innerWidth || document.documentElement.clientWidth) } function CSSReader() { this.CreateBlock = function () { var e, t = GetCurrentDocument(); if (t) { (e = t.createElement("div")).id = "CSSReader_block"; var r = t.createElement("h1"); r.appendChild(t.createTextNode("")), e.appendChild(r); var o = t.createElement("div"); for (var n in o.id = "CSSReader_center", CSSReader_categories) { var S = t.createElement("div"); S.id = "CSSReader_" + n, S.className = "CSSReader_category"; var a = t.createElement("h2"); a.appendChild(t.createTextNode(CSSReader_categoriesTitle[n])); for (var i = t.createElement("ul"), l = CSSReader_categories[n], s = 0; s < l.length; s++) { var d = t.createElement("li"); d.id = "CSSReader_" + l[s]; var p = t.createElement("span"); p.className = "CSSReader_property"; var C = t.createElement("span"); p.appendChild(t.createTextNode(l[s])), d.appendChild(p), d.appendChild(C), i.appendChild(d) } S.appendChild(a), S.appendChild(i), o.appendChild(S) } e.appendChild(o); var y = t.createElement("div"); y.id = "CSSReader_footer", y.appendChild(t.createTextNode("PRESS: FF to Un/Freeze, c - COPY CSS, ESC- Close.")), e.appendChild(y) } return cssReaderInsertMessage("CSSReader loaded! Hover any element you want to inspect in the page."), e }, this.GetAllElements = function (e) { var t = new Array; if (e && e.hasChildNodes()) { t.push(e); for (var r = e.childNodes, o = 0; o < r.length; o++)r[o].hasChildNodes() ? t = t.concat(this.GetAllElements(r[o])) : 1 == r[o].nodeType && t.push(r[o]) } return t }, this.haveEventListeners = !1, this.AddEventListeners = function () { for (var e = GetCurrentDocument(), t = this.GetAllElements(e.body), r = 0; r < t.length; r++)t[r].addEventListener("mouseover", CSSReaderMouseOver, !1), t[r].addEventListener("mouseout", CSSReaderMouseOut, !1), t[r].addEventListener("mousemove", CSSReaderMouseMove, !1); this.haveEventListeners = !0 }, this.RemoveEventListeners = function () { for (var e = GetCurrentDocument(), t = this.GetAllElements(e.body), r = 0; r < t.length; r++)t[r].removeEventListener("mouseover", CSSReaderMouseOver, !1), t[r].removeEventListener("mouseout", CSSReaderMouseOut, !1), t[r].removeEventListener("mousemove", CSSReaderMouseMove, !1); this.haveEventListeners = !1 }, this.SetTitle = function () { }, this.AddCSS = function (e) { var t = GetCurrentDocument(), r = t.createElement("link"); r.setAttribute("href", e), r.setAttribute("rel", "stylesheet"), r.setAttribute("type", "text/css"); var o = t.getElementsByTagName("head"); o.length > 0 ? o[0].appendChild(r) : t.documentElement.appendChild(r) }, this.RemoveCSS = function (e) { for (var t = GetCurrentDocument(), r = t.getElementsByTagName("link"), o = 0; o < r.length; o++)if ("stylesheet" == r[o].rel && r[o].href == e) { var n = t.getElementsByTagName("head"); return void (n.length > 0 && n[0].removeChild(r[o])) } } } function cssReaderInsertMessage(e) { var t = document.createElement("p"), r = document.createTextNode(e); t.appendChild(r), t.id = "cssReaderInsertMessage", t.style.backgroundColor = "#0a0a0a", t.style.color = "#ffffff", t.style.position = "absolute", t.style.top = "10px", t.style.left = "10px", t.style.zIndex = "100", t.style.padding = "3px", document.body.appendChild(t) } function cssReaderRemoveElement(e) { var t = document.getElementById(e); t && document.body.removeChild(t) } function cssReaderCopyCssToConsole(e) { return "el" == e ? console.log(CSSReader_element) : "id" == e ? console.log(CSSReader_element.id) : "tagName" == e ? console.log(CSSReader_element.tagName) : "className" == e ? console.log(CSSReader_element.className) : "style" == e ? console.log(CSSReader_element.style) : "cssText" == e ? console.log(document.defaultView.getComputedStyle(CSSReader_element, null).cssText) : "getComputedStyle" == e ? console.log(document.defaultView.getComputedStyle(CSSReader_element, null)) : "simpleCssDefinition" == e ? console.log(CSSReader_element_cssDefinition) : void 0 } function CssReaderKeyMap(e) { cssReader.IsEnabled() && (27 === e.keyCode && (console.log("escape"), window.location.reload(), CSSReader_current_element.style.outline = "", cssReader.Disable()), e.altKey || e.ctrlKey || (70 === e.keyCode && (cssReader.haveEventListeners ? cssReader.Freeze() : (cssReader.Unfreeze(), window.location.reload())), 67 === e.keyCode && window.prompt("Simple Css Definition :\n\nYou may copy the code below then hit escape to continue.", CSSReader_element_cssDefinition))) } CSSReader.prototype.IsEnabled = function () { return !!GetCurrentDocument().getElementById("CSSReader_block") }, CSSReader.prototype.Enable = function () { console.log("viewe enabled"); var e = GetCurrentDocument(), t = e.getElementById("CSSReader_block"); return !t && (t = this.CreateBlock(), e.body.appendChild(t), this.AddEventListeners(), !0) }, CSSReader.prototype.Disable = function () { console.log("viewer disabled"); var e = GetCurrentDocument(), t = e.getElementById("CSSReader_block"); return !!t && (e.body.removeChild(t), this.RemoveEventListeners(), !0) }, CSSReader.prototype.Freeze = function () { return !(!GetCurrentDocument().getElementById("CSSReader_block") || !this.haveEventListeners) && (this.RemoveEventListeners(), !0) }, CSSReader.prototype.Unfreeze = function () { return !(!GetCurrentDocument().getElementById("CSSReader_block") || this.haveEventListeners) && (CSSReader_current_element.style.outline = "", this.AddEventListeners(), !0) }, chrome.runtime.onMessage.addListener((e => { cssReaderCopyCssToConsole(e.args) })); let cssReader = new CSSReader; console.log("started!"), cssReader.IsEnabled() ? cssReader.Disable() : cssReader.Enable(), document.onkeydown = CssReaderKeyMap;